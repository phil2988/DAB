// <auto-generated />
using System;
using Assignment_2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment_2.Migrations
{
    [DbContext(typeof(au653164Context))]
    [Migration("20211029081719_0.2")]
    partial class _02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment_2.Tables.Activity", b =>
                {
                    b.Property<string>("ActivityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("activityName");

                    b.HasKey("ActivityName")
                        .HasName("PK__Activity__BD8CC0A8B21D014C");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Assignment_2.Tables.Chairman", b =>
                {
                    b.Property<string>("ChairmanName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("chairmanName");

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_adress");

                    b.Property<long?>("Cpr")
                        .HasColumnType("bigint")
                        .HasColumnName("_cpr");

                    b.Property<string>("LocationAdress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("locationAdress");

                    b.Property<int?>("RoomKey")
                        .HasColumnType("int")
                        .HasColumnName("roomKey");

                    b.HasKey("ChairmanName")
                        .HasName("PK__Chairman__1BC12E7435675000");

                    b.ToTable("Chairman");
                });

            modelBuilder.Entity("Assignment_2.Tables.LocationProperty", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("propertyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Chairs")
                        .HasColumnType("bit")
                        .HasColumnName("_chairs");

                    b.Property<bool?>("CoffeeMachine")
                        .HasColumnType("bit")
                        .HasColumnName("_coffeeMachine");

                    b.Property<bool?>("SoccerGoals")
                        .HasColumnType("bit")
                        .HasColumnName("_soccerGoals");

                    b.Property<bool?>("SoundSystem")
                        .HasColumnType("bit")
                        .HasColumnName("_soundSystem");

                    b.Property<bool?>("Tables")
                        .HasColumnType("bit")
                        .HasColumnName("_tables");

                    b.Property<bool?>("Toilet")
                        .HasColumnType("bit")
                        .HasColumnName("_toilet");

                    b.Property<bool?>("Water")
                        .HasColumnType("bit")
                        .HasColumnName("_water");

                    b.Property<bool?>("Whiteboard")
                        .HasColumnType("bit")
                        .HasColumnName("_whiteboard");

                    b.Property<bool?>("Wifi")
                        .HasColumnType("bit")
                        .HasColumnName("_wifi");

                    b.HasKey("PropertyId")
                        .HasName("PK__Location__9C0B8C7D6BFF421A");

                    b.ToTable("Location_Properties");
                });

            modelBuilder.Entity("Assignment_2.Tables.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memberId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_adress");

                    b.Property<long?>("Cpr")
                        .HasColumnType("bigint")
                        .HasColumnName("_cpr");

                    b.Property<string>("LocationAdress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("locationAdress");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_name");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("roomId");

                    b.HasKey("MemberId");

                    b.HasIndex("LocationAdress");

                    b.HasIndex("RoomId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Assignment_2.Tables.Municipality", b =>
                {
                    b.Property<long>("SocietyCvr")
                        .HasColumnType("bigint")
                        .HasColumnName("societyCvr");

                    b.HasIndex("SocietyCvr");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("Assignment_2.Tables.MunicipalityLocation", b =>
                {
                    b.Property<string>("LocationAdress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("locationAdress");

                    b.Property<TimeSpan?>("LocationAvailabilityStart")
                        .HasColumnType("time")
                        .HasColumnName("_locationAvailabilityStart");

                    b.Property<TimeSpan?>("LocationAvailabilityStop")
                        .HasColumnType("time")
                        .HasColumnName("_locationAvailabilityStop");

                    b.Property<int?>("MaxMembers")
                        .HasColumnType("int")
                        .HasColumnName("_maxMembers");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("propertyId");

                    b.HasKey("LocationAdress")
                        .HasName("PK__Municipa__4FAFE91BB12ECCA8");

                    b.HasIndex("PropertyId");

                    b.ToTable("Municipality_Location");
                });

            modelBuilder.Entity("Assignment_2.Tables.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roomId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_bookedByName");

                    b.Property<string>("BookedBySociety")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_bookedBySociety");

                    b.Property<TimeSpan?>("BookedStart")
                        .HasColumnType("time")
                        .HasColumnName("_bookedStart");

                    b.Property<TimeSpan?>("BookedStop")
                        .HasColumnType("time")
                        .HasColumnName("_bookedStop");

                    b.Property<string>("LocationAdress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("locationAdress");

                    b.Property<int?>("MaxMembers")
                        .HasColumnType("int")
                        .HasColumnName("_maxMembers");

                    b.Property<TimeSpan?>("RoomAvailabilityStart")
                        .HasColumnType("time")
                        .HasColumnName("_roomAvailabilityStart");

                    b.Property<TimeSpan?>("RoomAvailabilityStop")
                        .HasColumnType("time")
                        .HasColumnName("_roomAvailabilityStop");

                    b.Property<int>("RoomKey")
                        .HasColumnType("int")
                        .HasColumnName("_roomKey");

                    b.HasKey("RoomId");

                    b.HasIndex("LocationAdress");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Assignment_2.Tables.Society", b =>
                {
                    b.Property<long>("SocietyCvr")
                        .HasColumnType("bigint")
                        .HasColumnName("societyCvr");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("activityName");

                    b.Property<string>("ChairmanName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("chairmanName");

                    b.Property<string>("SocietyAdress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_societyAdress");

                    b.Property<string>("SocietyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("_societyName");

                    b.HasKey("SocietyCvr")
                        .HasName("PK__Society__41BA8D9C58F8827D");

                    b.HasIndex("ActivityName");

                    b.HasIndex("ChairmanName");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("Assignment_2.Tables.SocietyMemberRelation", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<long>("SocietyCvr")
                        .HasColumnType("bigint")
                        .HasColumnName("societyCvr");

                    b.HasIndex("SocietyCvr");

                    b.HasIndex(new[] { "MemberId", "SocietyCvr" }, "UQ__SocietyM__ABCC67CEC7F0F4D5")
                        .IsUnique();

                    b.ToTable("SocietyMemberRelations");
                });

            modelBuilder.Entity("Assignment_2.Tables.Member", b =>
                {
                    b.HasOne("Assignment_2.Tables.MunicipalityLocation", "LocationAdressNavigation")
                        .WithMany("Members")
                        .HasForeignKey("LocationAdress")
                        .HasConstraintName("FK_Member.locationAdress");

                    b.HasOne("Assignment_2.Tables.Room", "Room")
                        .WithMany("Members")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Member.roomId");

                    b.Navigation("LocationAdressNavigation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Assignment_2.Tables.Municipality", b =>
                {
                    b.HasOne("Assignment_2.Tables.Society", "SocietyCvrNavigation")
                        .WithMany()
                        .HasForeignKey("SocietyCvr")
                        .HasConstraintName("FK_Municipality.societyCvr")
                        .IsRequired();

                    b.Navigation("SocietyCvrNavigation");
                });

            modelBuilder.Entity("Assignment_2.Tables.MunicipalityLocation", b =>
                {
                    b.HasOne("Assignment_2.Tables.LocationProperty", "Property")
                        .WithMany("MunicipalityLocations")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK.Municipality_Location.propertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assignment_2.Tables.Room", b =>
                {
                    b.HasOne("Assignment_2.Tables.MunicipalityLocation", "LocationAdressNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationAdress")
                        .HasConstraintName("FK_Room.locationAdress")
                        .IsRequired();

                    b.Navigation("LocationAdressNavigation");
                });

            modelBuilder.Entity("Assignment_2.Tables.Society", b =>
                {
                    b.HasOne("Assignment_2.Tables.Activity", "ActivityNameNavigation")
                        .WithMany("Societies")
                        .HasForeignKey("ActivityName")
                        .HasConstraintName("FK_Society.activityName");

                    b.HasOne("Assignment_2.Tables.Chairman", "ChairmanNameNavigation")
                        .WithMany("Societies")
                        .HasForeignKey("ChairmanName")
                        .HasConstraintName("FK_Society.chairmanName");

                    b.Navigation("ActivityNameNavigation");

                    b.Navigation("ChairmanNameNavigation");
                });

            modelBuilder.Entity("Assignment_2.Tables.SocietyMemberRelation", b =>
                {
                    b.HasOne("Assignment_2.Tables.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK__SocietyMe__membe__37A5467C")
                        .IsRequired();

                    b.HasOne("Assignment_2.Tables.Society", "SocietyCvrNavigation")
                        .WithMany()
                        .HasForeignKey("SocietyCvr")
                        .HasConstraintName("FK__SocietyMe__socie__36B12243")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SocietyCvrNavigation");
                });

            modelBuilder.Entity("Assignment_2.Tables.Activity", b =>
                {
                    b.Navigation("Societies");
                });

            modelBuilder.Entity("Assignment_2.Tables.Chairman", b =>
                {
                    b.Navigation("Societies");
                });

            modelBuilder.Entity("Assignment_2.Tables.LocationProperty", b =>
                {
                    b.Navigation("MunicipalityLocations");
                });

            modelBuilder.Entity("Assignment_2.Tables.MunicipalityLocation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Assignment_2.Tables.Room", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
